@import './_variables';


// Generate padding classes: .p-1, .pt-2, .px-4, etc.
@each $key, $value in $spacing-scale {
  .p-#{$key} { padding: $value; }
  .pt-#{$key} { padding-top: $value; }
  .pr-#{$key} { padding-right: $value; }
  .pb-#{$key} { padding-bottom: $value; }
  .pl-#{$key} { padding-left: $value; }
  .px-#{$key} { padding-left: $value; padding-right: $value; }
  .py-#{$key} { padding-top: $value; padding-bottom: $value; }

  .m-#{$key} { margin: $value; }
  .mt-#{$key} { margin-top: $value; }
  .mr-#{$key} { margin-right: $value; }
  .mb-#{$key} { margin-bottom: $value; }
  .ml-#{$key} { margin-left: $value; }
  .mx-#{$key} { margin-left: $value; margin-right: $value; }
  .my-#{$key} { margin-top: $value; margin-bottom: $value; }
}

// Text color classes
@each $name, $color in $colors {
  .text-#{$name} {
    color: $color;
  }
}

// Background color classes
@each $name, $color in $colors {
  .bg-#{$name} {
    background-color: $color;
  }
}

@each $key, $val in $spacing-scale {
  .top-#{$key} { top: $val; }
  .left-#{$key} { left: $val; }
  .right-#{$key} { right: $val; }
  .bottom-#{$key} { bottom: $val; }
}

//for spacing
// Width and height utilities
@each $key, $value in $spacing-scale {
  .w-#{$key} {
    width: $value;
  }

  .h-#{$key} {
    height: $value;
  }

  .min-w-#{$key} {
    min-width: $value;
  }

  .min-h-#{$key} {
    min-height: $value;
  }

  .max-w-#{$key} {
    max-width: $value;
  }

  .max-h-#{$key} {
    max-height: $value;
  }
}

// Generate utility classes like .font-bold, .font-light, etc.
@each $name, $weight in $font-weights {
  .font-#{$name} {
    font-weight: $weight;
  }
}

// Generate utility classes like .text-sm, .text-2xl, etc.
@each $key, $value in $text-sizes {
  .text-#{$key} {
    font-size: $value;
   @media (max-width: 768px) {
      font-size: calc(#{$value} * 0.85); // reduce by 15%
    }
  }
}

@each $name, $color in $colors {
  .text-#{$name} {
    color: #{$color};
  }
}

//justify here
@each $key, $value in $justify-options {
  .justify-#{$key} {
    justify-content: $value;
  }
}

@each $group, $properties in $hover-utilities {
  @each $name, $value in $properties {
    .hover-#{$group}-#{$name} {
      &:hover {
        @if $group == bg {
          background-color: $value;
        } 
        @else if $group == text {
          color: $value;
        }
        @else if $group == scale {
          transform: scale($value);
        }
        @else if $group == opacity {
          opacity: $value;
        }
      }
    }
  }
}
@each $key, $value in $border-radius {
  .rounded-#{$key} {
    border-radius: $value;
  }
}
// Flex utilities
.flex { display: flex; }
.flex-col { flex-direction: column;  }
.flex-row { flex-direction: row; }
.responsive {  flex-wrap: wrap; }
.justify-center { justify-content: center; }
.items-center { align-items : center; }

@each $key, $value in $spacing-scale {
  .gap-#{$key} {
    gap: #{$value};
  }
}


@each $name, $value in $border-widths {
  .border-t-#{$name} {
    border-top-width: $value;
  }

  .border-r-#{$name} {
    border-right-width: $value;
  }

  .border-b-#{$name} {
    border-bottom-width: $value;
  }

  .border-l-#{$name} {
    border-left-width: $value;
  }
}

// Border radius utilities (top, right, bottom, left)
@each $name, $value in $border-radius {
  // All sides border-radius
  .rounded-#{$name} {
    border-radius: $value;
  }

  // Border top radius (top-left and top-right)
  .rounded-t-#{$name} {
    border-top-left-radius: $value;
    border-top-right-radius: $value;
  }

  // Border bottom radius (bottom-left and bottom-right)
  .rounded-b-#{$name} {
    border-bottom-left-radius: $value;
    border-bottom-right-radius: $value;
  }

  // Border left radius (top-left and bottom-left)
  .rounded-l-#{$name} {
    border-top-left-radius: $value;
    border-bottom-left-radius: $value;
  }

  // Border right radius (top-right and bottom-right)
  .rounded-r-#{$name} {
    border-top-right-radius: $value;
    border-bottom-right-radius: $value;
  }

  // Top-left corner radius
  .rounded-tl-#{$name} {
    border-top-left-radius: $value;
  }

  // Top-right corner radius
  .rounded-tr-#{$name} {
    border-top-right-radius: $value;
  }

  // Bottom-left corner radius
  .rounded-bl-#{$name} {
    border-bottom-left-radius: $value;
  }

  // Bottom-right corner radius
  .rounded-br-#{$name} {
    border-bottom-right-radius: $value;
  }
}

// Border radius for individual sides (top, right, bottom, left)
@each $name, $value in $border-radius {
  .border-tl-#{$name} {
    border-top-left-radius: $value;
  }

  .border-tr-#{$name} {
    border-top-right-radius: $value;
  }

  .border-bl-#{$name} {
    border-bottom-left-radius: $value;
  }

  .border-br-#{$name} {
    border-bottom-right-radius: $value;
  }
}

// Mixin for media queries
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

// Container
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  

  // Optional: max-widths for responsiveness
  @media (min-width: 576px) {
    max-width: 540px;
  }

  @media (min-width: 768px) {
    max-width: 700px;
  }

  @media (min-width: 992px) {
    max-width: 940px;
  }

  @media (min-width: 1200px) {
    max-width: 1140px;
  }

  @media (min-width: 1400px) {
    max-width: 1320px;
  }
}


// ROW
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -($gutter / 2);
  margin-left: -($gutter / 2);
}

// COL
.col {
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  flex: 1 0 0%;
}
// Generate column classes
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 percentage($i / 12);
    max-width: percentage($i / 12);
  }

  // Responsive variants
  @each $bp, $value in $breakpoints {
    @include respond-to($bp) {
      .col-#{$bp}-#{$i} {
        flex: 0 0 percentage($i / 12);
        max-width: percentage($i / 12);
      }
    }
  }
}
.toggle {
  position: relative;
  display: inline-block;
  width: $switch-width;
  height: $switch-height;
  border-radius: 3px;
  background-color: $switch-bg;
  transition: background-color $switch-transition;
  cursor: pointer;

  input {
    display: none;
  }

  .thumb {
    position: absolute;
    top: 50%;
    left: 4px;
    transform: translateY(-50%);
    width: $switch-thumb-size;
    height: $switch-thumb-size;
    border-radius: 3px;
    background-color: $switch-thumb-bg;
    transition: left $switch-transition, background-color $switch-transition;
  }

  input:checked + .thumb {
    left: calc(100% - #{$switch-thumb-size} - 4px);
    background-color: $switch-thumb-bg-active;
    border-color: $switch-bg-active;
  }

  &.active {
    background-color: $switch-bg-active;

  }
}

.table-wrapper {
  width: 100%;
  overflow-x: auto;
}

.table-container {
  padding: 1rem;
  overflow-x: auto;
}

.defi-table {
  width: 100%;
  overflow: scroll;
  border-collapse: collapse;
  background-color: $table-bg;
  color: $text-color;

  th, td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid $border-color;
    text-align: left;
    white-space: nowrap;
  }

  th {
    font-weight: 600;
    color: lighten($text-color, 20%);
  }

.static
{
  position: sticky;
  left: 0;
  background-color: #1b1e1f; 
  z-index: 1; 
}

  tbody tr:hover {
    background-color: lighten($table-bg, 5%);
  }

  .text-red {
    color: $text-red;
  }

  .text-green {
    color: $text-green;
  }

  .icon {
    width: 16px;
    height: 16px;
    margin-right: 0.25rem;
    vertical-align: middle;
  }

  .rank {
    margin-right: 0.5rem;
    font-weight: bold;
    color: #aaa;
  }

  .chains {
    display: block;
    font-size: 0.75rem;
    color: #888;
  }
}
// Dropdown Container
.dropdown-container {
  position: relative;
  display: inline-block;
}

// Dropdown Menu
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  background-color: $primary-color;
  border: 1px solid $secondary-color;
  border-radius: 0.5rem;
  margin-top: 0.5rem;
  min-width: 160px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  padding: 0.5rem 0;

  .dropdown-item {
    padding: 0.5rem 1rem;
    color: $text-color;
    cursor: pointer;
    transition: background-color 0.3s ease;

    &:hover {
      background-color: $secondary-color;
    }
  }
}

// Transition for Dropdown
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.3s ease;
}
.fade-enter, .fade-leave-to {
  opacity: 0;
}

//buttons

.btn {
  display: inline-block;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  border-radius: 0.375rem;
  transition: all 0.15s ease-in-out;
  cursor: pointer;
  text-decoration: none;

  &.btn-block {
    display: block;
    width: 100%;
  }

  &.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }

  &.btn-lg {
    padding: 0.5rem 1rem;
    font-size: 1.25rem;
  }

  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
  }
}

// Loop through color map and generate themed buttons
@each $name, $color in $colors {
  .btn-#{$name} {
    background-color: $color;
    color: if(lightness($color) > 60, #000, #fff);
    border-color: darken($color, 5%);

    &:hover {
      background-color: darken($color, 7%);
      border-color: darken($color, 10%);
    }

    &:disabled {
      opacity: 0.65;
      cursor: not-allowed;
    }
  }
}
